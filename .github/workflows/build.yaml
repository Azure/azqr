name: "azqr-build"

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release-*

permissions: read-all

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.19
      GOLANGCILINT_VER: v1.50.1
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      PROJECT_NAME: azqr
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target_arch: [amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
            filename: azqr
          - os: windows-latest
            target_os: windows
            filename: azqr.exe
          - os: macOS-latest
            target_os: darwin
            filename: azqr
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ${{ env.GOVER }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Setup MinVer
        run: |
          dotnet tool install --global minver-cli --version 4.2.0

      - name: golangci-lint
        if: matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v3.3.1
        with:
          version: ${{ env.GOLANGCILINT_VER }}
          args: --timeout 3m --verbose

      - name: Run go mod tidy & check diff
        if: matrix.target_os == 'linux'
        run: |
          go mod tidy
          git diff --exit-code ./go.mod
          git diff --exit-code ./go.sum

      - name: Run Go vet
        if: matrix.target_os == 'linux'
        run: |
          go vet ./...

      - name: Run Tests
        if: matrix.target_os == 'linux'
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        run: |
          go install gotest.tools/gotestsum@latest
          CGO_ENABLED=0 gotestsum --jsonfile ./test_report_unit.json --format standard-quiet -- ./... $COVERAGE_OPTS --tags=unit
          go test ./...

      - name: Codecov
        if: matrix.target_os == 'linux'
        uses: codecov/codecov-action@v3

      - name: Calculate Version
        run: |
          echo "MINVERVERSIONOVERRIDE=$($HOME/.dotnet/tools/minver -t v. -m 0.1 -d preview)" >> $GITHUB_ENV
        if: matrix.os != 'windows-latest'

      - name: Calculate Version Windows
        run: |
          echo "MINVERVERSIONOVERRIDE=$(minver -t v. -m 0.1 -d preview)" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'

      - name: Create output folder
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}

      - name: Run build and archive non windows binaries
        if: matrix.target_os != 'windows'
        run: |
          GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} go build -ldflags "-s -w -X 'github.com/cmendible/azqr/cmd/azqr.version=${{ env.MINVERVERSIONOVERRIDE }}'" -o ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}/${{ matrix.filename }} ./cmd/main.go

      - name: Run build and archive windows binaries
        if: matrix.target_os == 'windows'
        run: |
          go build -ldflags "-s -w -X 'github.com/cmendible/azqr/cmd/azqr.version=${{ env.MINVERVERSIONOVERRIDE }}'" -o ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}/${{ matrix.filename }} ./cmd/main.go

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}/${{ matrix.filename }}

  release:
    name: Create Release
    needs: build
    if: github.event_name != 'pull_request' && startswith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ env.MINVERVERSIONOVERRIDE }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  publish:
    name: Publish binaries
    needs: release
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target_arch: [amd64]
    if: github.event_name != 'pull_request' && startswith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: ${{ github.workspace }}/release
      PROJECT_NAME: azqr
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: download artifacts - ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}/

      - name: upload linux artifact
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}/azqr
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}
          asset_content_type: application/octet-stream

      - name: upload windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}/azqr.exe
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.target_arch }}.exe
          asset_content_type: application/octet-stream
